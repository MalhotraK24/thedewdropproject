<!DOCTYPE html>
<html lang="en">
    <head>
        {% block head %} {% endblock %}
    </head>
    <body>
        <div id="snackbar">A new version of this app is available. Click <a id="reload">here</a> to update.</div>
        {% block content %} {% endblock %}
        {% include "./partials/_footer.njk" %}
        {% include "./partials/_scroll-to-top.njk" %}
    </body>
    <!-- Registering a service worker -->
    {# <script>
        let newWorker;

        function showUpdateBar() {
            let snackbar = document.getElementById('snackbar');
            snackbar.className = 'show';
        }

        // The click event on the pop up notification
        document.getElementById('reload').addEventListener('click', function(){
            newWorker.postMessage({ action: 'skipWaiting' });
        });

        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/serviceworker.js').then(reg => {
                reg.addEventListener('updatefound', () => {
                    console.log("Update Found!");
                    // A wild service worker has appeared in reg.installing!
                    newWorker = reg.installing;
                    newWorker.addEventListener('statechange', () => {
                        console.log("State Changed!");
                        // Has network.state changed?
                        switch (newWorker.state) {
                            case 'installed':
                            console.log("New Service Worker state is installed!");
                            console.log(navigator.serviceWorker.controller);
                            if (navigator.serviceWorker.controller) {
                                // new update available
                                showUpdateBar();
                            }
                            // No update available
                            break;
                        }
                    });
                });
            });

            let refreshing;
            navigator.serviceWorker.addEventListener('controllerchange', function () {
                console.log("Controller Change!");
                if (refreshing) return;
                window.location.reload();
                refreshing = true;
            });
        }
        </script> #}
        <script>
            // make the whole serviceworker process into a promise so later on we can
            // listen to it and in case new content is available a toast will be shown
            window.isUpdateAvailable = new Promise(function(resolve, reject) {
                // lazy way of disabling service workers while developing
                if ('serviceWorker' in navigator) {
                    // register service worker file
                    navigator.serviceWorker.register('/serviceworker.js')
                        .then(reg => {
                            reg.onupdatefound = () => {
                                const installingWorker = reg.installing;
                                installingWorker.onstatechange = () => {
                                    switch (installingWorker.state) {
                                        case 'installed':
                                            if (navigator.serviceWorker.controller) {
                                                // new update available
                                                resolve(true);
                                            } else {
                                                // no update available
                                                resolve(false);
                                            }
                                            break;
                                    }
                                };
                            };
                        })
                        .catch(err => console.error('[SW ERROR]', err));
                }
            });

            // listen to the service worker promise in index.html to see if there has been a new update.
            // condition: the service-worker.js needs to have some kind of change - e.g. increment CACHE_VERSION.
            window['isUpdateAvailable']
                .then(isAvailable => {
                    if (isAvailable) {
                        const toast = this.toastCtrl.create({
                            message: 'New Update available! Reload the webapp to see the latest juicy changes.',
                            position: 'bottom',
                            showCloseButton: true,
                        });
                        toast.present();
                    }
                });
        </script>
</html>